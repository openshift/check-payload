//go:build ignore

package main

import (
	"bufio"
	"flag"
	"log"
	"os"
	"strings"
	"text/template"
)

var (
	inFile  = flag.String("in", "errors.go", "Input file name")
	outFile = flag.String("out", "", "Output file name")

	tmpl = template.Must(template.New("").Parse(`// Generated by go generate; DO NOT EDIT.

package main

var KnownErrors = map[string]error {
{{- range .Vars }}
	{{ printf "\"%s\": %s," . . }}
{{- end }}
}
`))
)

func main() {
	flag.Parse()

	input, err := os.Open(*inFile)
	if err != nil {
		log.Fatal(err)
	}
	defer input.Close()

	out := os.Stdout
	if *outFile != "" {
		out, err = os.Create(*outFile)
		if err != nil {
			log.Fatal(err)
		}
		defer out.Close()
	}

	vars := []string{}
	s := bufio.NewScanner(input)
	for s.Scan() {
		line := s.Text()
		if strings.HasPrefix(line, "\tErr") {
			// Extract the variable name.
			vars = append(vars, line[1:strings.IndexByte(line, ' ')])
		}
	}
	if err := s.Err(); err != nil {
		log.Fatal(err)
	}
	tmpl.Execute(out, struct {
		Vars []string
	}{
		Vars: vars,
	})
}
